/// <reference types="node" resolution-mode="require"/>
import { tokenize, tts } from '@livekit/agents';
import { URL } from 'node:url';
import type { TTSEncoding, TTSModels } from './models.js';
type Voice = {
    id: string;
    name: string;
    category: string;
    settings?: VoiceSettings;
};
type VoiceSettings = {
    stability: number;
    similarity_boost: number;
    style?: number;
    use_speaker_boost: boolean;
};
export interface TTSOptions {
    apiKey?: string;
    voice: Voice;
    modelID: TTSModels;
    baseURL: string;
    encoding: TTSEncoding;
    streamingLatency: number;
    wordTokenizer: tokenize.WordTokenizer;
    chunkLengthSchedule: number[];
    enableSsmlParsing: boolean;
}
export declare class TTS extends tts.TTS {
    #private;
    label: string;
    constructor(opts?: Partial<TTSOptions>);
    listVoices(): Promise<Voice[]>;
    synthesize(): tts.ChunkedStream;
    stream(): tts.SynthesizeStream;
}
export declare class SynthesizeStream extends tts.SynthesizeStream {
    #private;
    label: string;
    readonly streamURL: URL;
    constructor(tts: TTS, opts: TTSOptions);
}
export {};
//# sourceMappingURL=tts.d.ts.map